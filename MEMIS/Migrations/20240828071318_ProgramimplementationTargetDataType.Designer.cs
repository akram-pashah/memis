// <auto-generated />
using System;
using MEMIS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MEMIS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240828071318_ProgramimplementationTargetDataType")]
    partial class ProgramimplementationTargetDataType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MEMIS.Data.Activity", b =>
                {
                    b.Property<int>("intActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intActivity"));

                    b.Property<string>("activityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("activityName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("intAction")
                        .HasColumnType("int");

                    b.HasKey("intActivity");

                    b.HasIndex("intAction");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssess", b =>
                {
                    b.Property<int>("intAssess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intAssess"));

                    b.Property<int?>("ApprStatus")
                        .HasColumnType("int");

                    b.Property<string>("IdentifiedRisks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("QBudget")
                        .HasColumnType("float");

                    b.Property<double?>("QTarget")
                        .HasColumnType("float");

                    b.Property<int?>("Quarter")
                        .HasColumnType("int");

                    b.Property<int?>("actType")
                        .HasColumnType("int");

                    b.Property<double?>("baseline")
                        .HasColumnType("float");

                    b.Property<double?>("budgetAmount")
                        .HasColumnType("float");

                    b.Property<double?>("budgetCode")
                        .HasColumnType("float");

                    b.Property<double?>("comparativeTarget")
                        .HasColumnType("float");

                    b.Property<int?>("intAction")
                        .HasColumnType("int");

                    b.Property<int?>("intActivity")
                        .HasColumnType("int");

                    b.Property<Guid?>("intDept")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("intIntervention")
                        .HasColumnType("int");

                    b.Property<string>("justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("outputIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intAssess");

                    b.HasIndex("intAction");

                    b.HasIndex("intActivity");

                    b.HasIndex("intDept");

                    b.HasIndex("intIntervention");

                    b.ToTable("ActivityAssess");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessRegion", b =>
                {
                    b.Property<int>("intRegionAssess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intRegionAssess"));

                    b.Property<int?>("ApprStatus")
                        .HasColumnType("int");

                    b.Property<double?>("QBudget")
                        .HasColumnType("float");

                    b.Property<double?>("QTarget")
                        .HasColumnType("float");

                    b.Property<int?>("Quarter")
                        .HasColumnType("int");

                    b.Property<double?>("budgetAmount")
                        .HasColumnType("float");

                    b.Property<int>("intAssess")
                        .HasColumnType("int");

                    b.Property<Guid?>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("intRegionAssess");

                    b.HasIndex("intAssess");

                    b.HasIndex("intRegion");

                    b.ToTable("ActivityAssessRegion");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessment", b =>
                {
                    b.Property<int>("intDeptPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intDeptPlan"));

                    b.Property<long?>("ActivityAssesmentStatus")
                        .HasColumnType("bigint");

                    b.Property<double?>("AnnualAchievement")
                        .HasColumnType("float");

                    b.Property<string>("AnnualJustification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImpStatusId")
                        .HasColumnType("int");

                    b.Property<double?>("Q1Actual")
                        .HasColumnType("float");

                    b.Property<double?>("Q1AmtSpent")
                        .HasColumnType("float");

                    b.Property<double?>("Q1Budget")
                        .HasColumnType("float");

                    b.Property<string>("Q1Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Q1Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q2Actual")
                        .HasColumnType("float");

                    b.Property<double?>("Q2AmtSpent")
                        .HasColumnType("float");

                    b.Property<double?>("Q2Budget")
                        .HasColumnType("float");

                    b.Property<string>("Q2Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Q2Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q3Actual")
                        .HasColumnType("float");

                    b.Property<double?>("Q3AmtSpent")
                        .HasColumnType("float");

                    b.Property<double?>("Q3Budget")
                        .HasColumnType("float");

                    b.Property<string>("Q3Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Q3Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q4Actual")
                        .HasColumnType("float");

                    b.Property<double?>("Q4AmtSpent")
                        .HasColumnType("float");

                    b.Property<double?>("Q4Budget")
                        .HasColumnType("float");

                    b.Property<string>("Q4Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Q4Target")
                        .HasColumnType("float");

                    b.Property<string>("StrategicAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotAmtSpent")
                        .HasColumnType("float");

                    b.Property<int?>("actType")
                        .HasColumnType("int");

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("baseline")
                        .HasColumnType("float");

                    b.Property<double?>("budgetAmount")
                        .HasColumnType("float");

                    b.Property<double?>("budgetCode")
                        .HasColumnType("float");

                    b.Property<double?>("comparativeTarget")
                        .HasColumnType("float");

                    b.Property<Guid?>("intDept")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("outputIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strategicIntervention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strategicObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("unitCost")
                        .HasColumnType("float");

                    b.HasKey("intDeptPlan");

                    b.HasIndex("ImpStatusId");

                    b.HasIndex("intDept");

                    b.ToTable("ActivityAssessment");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessmentRegion", b =>
                {
                    b.Property<int>("intRegionAssess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intRegionAssess"));

                    b.Property<int?>("ApprStatus")
                        .HasColumnType("int");

                    b.Property<double?>("QAchievement")
                        .HasColumnType("float");

                    b.Property<double?>("QAmtSpent")
                        .HasColumnType("float");

                    b.Property<double?>("QBudget")
                        .HasColumnType("float");

                    b.Property<double?>("QRegJustification")
                        .HasColumnType("float");

                    b.Property<double?>("QTarget")
                        .HasColumnType("float");

                    b.Property<int?>("Quarter")
                        .HasColumnType("int");

                    b.Property<double?>("budgetAmount")
                        .HasColumnType("float");

                    b.Property<int>("intAssess")
                        .HasColumnType("int");

                    b.Property<int>("intAssessment")
                        .HasColumnType("int");

                    b.Property<Guid?>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("intRegionAssess");

                    b.HasIndex("intAssess");

                    b.HasIndex("intAssessment");

                    b.HasIndex("intRegion");

                    b.ToTable("ActivityAssessmentRegion");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectInitiationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectInitiationId");

                    b.ToTable("ActivityPlan");
                });

            modelBuilder.Entity("MEMIS.Data.AnnualImplemtationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Risk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("annualTarget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("baseline")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int?>("intAction")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("intActivity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("intDept")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("intFocus")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("intIntervention")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("intObjective")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("meansofVerification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("regStatus")
                        .HasColumnType("int");

                    b.Property<string>("subProgram")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("intAction");

                    b.HasIndex("intActivity");

                    b.HasIndex("intDept");

                    b.HasIndex("intFocus");

                    b.HasIndex("intIntervention");

                    b.HasIndex("intObjective");

                    b.ToTable("AnnualImplemtationPlan");
                });

            modelBuilder.Entity("MEMIS.Data.ComplianceSupportSupervision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<int>("CategoryStatus")
                        .HasColumnType("int");

                    b.Property<int>("ClassofDrugs")
                        .HasColumnType("int");

                    b.Property<int>("CompAction")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityPersonType")
                        .HasColumnType("int");

                    b.Property<int>("FacilityStatus")
                        .HasColumnType("int");

                    b.Property<string>("GPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PremisesCondition")
                        .HasColumnType("int");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordKeeping")
                        .HasColumnType("int");

                    b.Property<int>("UnregisteredDrugs")
                        .HasColumnType("int");

                    b.Property<Guid>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("intRegion");

                    b.ToTable("ComplianceSupportSupervision");
                });

            modelBuilder.Entity("MEMIS.Data.Department", b =>
                {
                    b.Property<Guid>("intDept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("deptCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("intDir")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("intHod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intDept");

                    b.HasIndex("HodId");

                    b.HasIndex("intDir");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MEMIS.Data.DepartmentPlan", b =>
                {
                    b.Property<int>("intDeptPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intDeptPlan"));

                    b.Property<double?>("Q1Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q1Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q2Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q2Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q3Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q3Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q4Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q4Target")
                        .HasColumnType("float");

                    b.Property<string>("StrategicAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("baseline")
                        .HasColumnType("float");

                    b.Property<double?>("budgetAmount")
                        .HasColumnType("float");

                    b.Property<double?>("budgetCode")
                        .HasColumnType("float");

                    b.Property<double?>("comparativeTarget")
                        .HasColumnType("float");

                    b.Property<string>("justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("outputIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strategicIntervention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strategicObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("unitCost")
                        .HasColumnType("float");

                    b.HasKey("intDeptPlan");

                    b.ToTable("DepartmentPlan");
                });

            modelBuilder.Entity("MEMIS.Data.DeptPlan", b =>
                {
                    b.Property<int>("intActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intActivity"));

                    b.Property<int>("ApprStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<double?>("Q1Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q1Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q2Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q2Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q3Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q3Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q4Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q4Target")
                        .HasColumnType("float");

                    b.Property<int?>("StrategicAction")
                        .HasColumnType("int");

                    b.Property<int?>("StrategicObjective")
                        .HasColumnType("int");

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("baseline")
                        .HasColumnType("float");

                    b.Property<double?>("budgetAmount")
                        .HasColumnType("float");

                    b.Property<double?>("budgetCode")
                        .HasColumnType("float");

                    b.Property<double?>("comparativeTarget")
                        .HasColumnType("float");

                    b.Property<string>("justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("outputIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("strategicIntervention")
                        .HasColumnType("int");

                    b.Property<double?>("unitCost")
                        .HasColumnType("float");

                    b.HasKey("intActivity");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StrategicAction");

                    b.HasIndex("StrategicObjective");

                    b.HasIndex("strategicIntervention");

                    b.ToTable("DeptPlan");
                });

            modelBuilder.Entity("MEMIS.Data.Directorate", b =>
                {
                    b.Property<Guid>("intDir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("dirCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dirName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intDir");

                    b.HasIndex("DirectorId");

                    b.ToTable("Directorates");
                });

            modelBuilder.Entity("MEMIS.Data.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("District");
                });

            modelBuilder.Entity("MEMIS.Data.Enforcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<int>("CategoryStatus")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("EnfAction")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityPersonType")
                        .HasColumnType("int");

                    b.Property<int>("FacilityStatus")
                        .HasColumnType("int");

                    b.Property<string>("GPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("intRegion");

                    b.ToTable("Enforcement");
                });

            modelBuilder.Entity("MEMIS.Data.FYear", b =>
                {
                    b.Property<int>("intyear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intyear"));

                    b.Property<string>("yearcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intyear");

                    b.ToTable("M_FYEAR");
                });

            modelBuilder.Entity("MEMIS.Data.FocusArea", b =>
                {
                    b.Property<int>("intFocus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intFocus"));

                    b.Property<string>("FocusAreaName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FocusAreacode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("intFocus");

                    b.ToTable("FocusArea");
                });

            modelBuilder.Entity("MEMIS.Data.GDP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<int>("CategoryStatus")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityPersonType")
                        .HasColumnType("int");

                    b.Property<int>("FacilityStatus")
                        .HasColumnType("int");

                    b.Property<int>("FacilityType")
                        .HasColumnType("int");

                    b.Property<string>("GPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendedforGDP")
                        .HasColumnType("int");

                    b.Property<int>("certStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("intRegion");

                    b.ToTable("GDP");
                });

            modelBuilder.Entity("MEMIS.Data.GPP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<int>("CategoryStatus")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityPersonType")
                        .HasColumnType("int");

                    b.Property<int>("FacilityStatus")
                        .HasColumnType("int");

                    b.Property<int>("FacilityType")
                        .HasColumnType("int");

                    b.Property<string>("GPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendedforGPP")
                        .HasColumnType("int");

                    b.Property<int>("certStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("intRegion");

                    b.ToTable("GPP");
                });

            modelBuilder.Entity("MEMIS.Data.HerbalInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<int>("CertRecommendation")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityPersonType")
                        .HasColumnType("int");

                    b.Property<int>("FacilityStatus")
                        .HasColumnType("int");

                    b.Property<string>("GPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("intRegion");

                    b.ToTable("HerbalInspection");
                });

            modelBuilder.Entity("MEMIS.Data.KPIAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Achieved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Denominator")
                        .HasColumnType("float");

                    b.Property<int>("FY")
                        .HasColumnType("int");

                    b.Property<int>("FrequencyofReporting")
                        .HasColumnType("int");

                    b.Property<string>("IndicatorDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndicatorFormulae")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KPIMasterId")
                        .HasColumnType("int");

                    b.Property<double?>("Numerator")
                        .HasColumnType("float");

                    b.Property<string>("PerformanceIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rate")
                        .HasColumnType("float");

                    b.Property<double?>("Target")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("KPIMasterId");

                    b.ToTable("KPI_Assessment");
                });

            modelBuilder.Entity("MEMIS.Data.KPIMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FY1")
                        .HasColumnType("float");

                    b.Property<double?>("FY2")
                        .HasColumnType("float");

                    b.Property<double?>("FY3")
                        .HasColumnType("float");

                    b.Property<double?>("FY4")
                        .HasColumnType("float");

                    b.Property<double?>("FY5")
                        .HasColumnType("float");

                    b.Property<int>("FrequencyofReporting")
                        .HasColumnType("int");

                    b.Property<string>("IndicatorDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndicatorFormulae")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Indicatorclassification")
                        .HasColumnType("int");

                    b.Property<string>("MeansofVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OriginalBaseline")
                        .HasColumnType("bigint");

                    b.Property<string>("PerformanceIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleParty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StrategicObjective")
                        .HasColumnType("int");

                    b.Property<int>("TypeofIndicator")
                        .HasColumnType("int");

                    b.Property<string>("Unitofmeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StrategicObjective");

                    b.ToTable("KPI");
                });

            modelBuilder.Entity("MEMIS.Data.Master.ImplementationStatus", b =>
                {
                    b.Property<int>("ImpStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImpStatusId"));

                    b.Property<string>("ImpStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImpStatusId");

                    b.ToTable("ImplementationStatus");
                });

            modelBuilder.Entity("MEMIS.Data.NDAFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NDAFile");
                });

            modelBuilder.Entity("MEMIS.Data.NDP", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Programme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgrammeIntervention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgrammeObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubProgramme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubProgrammeObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("NDP");
                });

            modelBuilder.Entity("MEMIS.Data.NDPFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NDPFile");
                });

            modelBuilder.Entity("MEMIS.Data.NDP_HD", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("active")
                        .HasColumnType("int");

                    b.Property<int>("fromyear")
                        .HasColumnType("int");

                    b.Property<string>("ndpname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("toyear")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("NDP_HD");
                });

            modelBuilder.Entity("MEMIS.Data.Preinspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Applicant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Business")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NearestDrugShopDistance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestDrugShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestDrugShopRoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestPharmaDistance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestPharmaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestPharmaRoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductClassification")
                        .HasColumnType("int");

                    b.Property<string>("Road")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Preinspection");
                });

            modelBuilder.Entity("MEMIS.Data.PreinspectionNewManUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Applicant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Business")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductClassification")
                        .HasColumnType("int");

                    b.Property<string>("Road")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("PreinspectionManufacturingUnit");
                });

            modelBuilder.Entity("MEMIS.Data.PreinspectionPharma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Applicant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalStatusDir")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusHead")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusInspector")
                        .HasColumnType("int");

                    b.Property<string>("Business")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorInspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorInspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorInspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadInspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadInspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadInspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestPharmaDistance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestPharmaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestPharmaRoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductClassification")
                        .HasColumnType("int");

                    b.Property<string>("Road")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("PreinspectionPharma");
                });

            modelBuilder.Entity("MEMIS.Data.ProgramImplementationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FY1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FY2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FY3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FY4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FY5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeansofVerification")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OutputTarget")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ResponsibleParty")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("intAction")
                        .HasColumnType("int");

                    b.Property<int?>("intActivity")
                        .HasColumnType("int");

                    b.Property<int?>("intIntervention")
                        .HasColumnType("int");

                    b.Property<int?>("intObjective")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("intAction");

                    b.HasIndex("intActivity");

                    b.HasIndex("intIntervention");

                    b.HasIndex("intObjective");

                    b.ToTable("ProgramImplementationPlan");
                });

            modelBuilder.Entity("MEMIS.Data.Project.MonitoringAndControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CompletedDate")
                        .HasColumnType("date");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("ImplementationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("LateBy")
                        .HasColumnType("date");

                    b.Property<string>("OverDue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectInitiationId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectInitiationId");

                    b.ToTable("MonitoringAndControl");
                });

            modelBuilder.Entity("MEMIS.Data.Project.StakeHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactPersonAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Impact")
                        .HasColumnType("int");

                    b.Property<int>("Influence")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectInitiationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("StakeHolderImportant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StakeholderContribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StakeholderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StakeholderStrategy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stakeholderblock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectInitiationId");

                    b.ToTable("ProjectStakeHolder");
                });

            modelBuilder.Entity("MEMIS.Data.ProjectInitiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BudgetCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Members")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubProgram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ProjectInitiation");
                });

            modelBuilder.Entity("MEMIS.Data.ProjectOthersTab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Attachment")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectInitiationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Resourses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectInitiationId");

                    b.ToTable("ProjectOthersTab");
                });

            modelBuilder.Entity("MEMIS.Data.ProjectPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectInitiationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectInitiationId");

                    b.ToTable("ProjectPayment");
                });

            modelBuilder.Entity("MEMIS.Data.ProjectRiskIdentification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProjectInitiationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Risk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectInitiationId");

                    b.ToTable("ProjectRiskIdentification");
                });

            modelBuilder.Entity("MEMIS.Data.QuaterlyPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("ActivityAccessId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityAssessRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityAssessmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityAssessmentRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("DeptPlanId")
                        .HasColumnType("int");

                    b.Property<string>("QAchievement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("QActual")
                        .HasColumnType("float");

                    b.Property<double?>("QAmtSpent")
                        .HasColumnType("float");

                    b.Property<double?>("QBudget")
                        .HasColumnType("float");

                    b.Property<string>("QJustification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("QTarget")
                        .HasColumnType("float");

                    b.Property<string>("Quarter")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityAccessId");

                    b.HasIndex("ActivityAssessRegionId");

                    b.HasIndex("ActivityAssessmentId");

                    b.HasIndex("ActivityAssessmentRegionId");

                    b.HasIndex("DeptPlanId");

                    b.ToTable("QuaterlyPlans");
                });

            modelBuilder.Entity("MEMIS.Data.Region", b =>
                {
                    b.Property<Guid>("intRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IntHeadId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegCoordinatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("intHead")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("regCoordinator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("regionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("regionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intRegion");

                    b.HasIndex("IntHeadId");

                    b.HasIndex("RegCoordinatorId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("MEMIS.Data.RelocationDrugShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Applicant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalStatusDir")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusHead")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusInspector")
                        .HasColumnType("int");

                    b.Property<string>("Business")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CGPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVillage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<string>("DirectorInspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorInspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorInspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("HeadInspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadInspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadInspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PGPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PRoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PVillage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductClassification")
                        .HasColumnType("int");

                    b.Property<string>("comments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("RelocationDrugShop");
                });

            modelBuilder.Entity("MEMIS.Data.RelocationPharma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Applicant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalStatusDir")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusHead")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusInspector")
                        .HasColumnType("int");

                    b.Property<string>("Business")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CGPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVillage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<string>("DirectorInspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorInspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorInspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("HeadInspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadInspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadInspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inspectorcomments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PGPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PRoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PVillage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductClassification")
                        .HasColumnType("int");

                    b.Property<string>("comments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("RelocationPharma");
                });

            modelBuilder.Entity("MEMIS.Data.Renewal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryOfpremises")
                        .HasColumnType("int");

                    b.Property<int>("CategoryStatus")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityPersonType")
                        .HasColumnType("int");

                    b.Property<int>("FacilityStatus")
                        .HasColumnType("int");

                    b.Property<string>("GPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicAction")
                        .HasColumnType("int");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PremisesCondition")
                        .HasColumnType("int");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordKeeping")
                        .HasColumnType("int");

                    b.Property<Guid>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("intRegion");

                    b.ToTable("Renewal");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.Cause", b =>
                {
                    b.Property<int>("intCause")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intCause"));

                    b.Property<string>("CauseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.Property<int>("intRisk")
                        .HasColumnType("int");

                    b.HasKey("intCause");

                    b.HasIndex("intRisk");

                    b.ToTable("Cause");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("RiskId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.QuarterlyRiskAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ImpStatusId")
                        .HasColumnType("int");

                    b.Property<double?>("IncidentValue")
                        .HasColumnType("float");

                    b.Property<double?>("NoOfIncedents")
                        .HasColumnType("float");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<string>("RiskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TreatmentPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImpStatusId");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("QuarterlyRiskActions");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskCause", b =>
                {
                    b.Property<int>("RiskCauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskCauseId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.HasKey("RiskCauseId");

                    b.HasIndex("RiskId");

                    b.ToTable("RiskCauses");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskConsequenceDetails", b =>
                {
                    b.Property<int>("RiskConsequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskConsequenceId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.HasKey("RiskConsequenceId");

                    b.HasIndex("RiskId");

                    b.ToTable("RiskConsequenceDetails");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskDetail", b =>
                {
                    b.Property<int>("RiskDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskDetailId"));

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskConsequence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.Property<string>("RiskSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiskDetailId");

                    b.HasIndex("RiskId");

                    b.ToTable("RiskDetails");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskIdent", b =>
                {
                    b.Property<int>("intRisk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intRisk"));

                    b.Property<DateTime?>("IdentifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("intStrategicObjective")
                        .HasColumnType("int");

                    b.HasKey("intRisk");

                    b.HasIndex("intStrategicObjective");

                    b.ToTable("T_RISKIDENTIFICATION");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskIdentification", b =>
                {
                    b.Property<int>("RiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskId"));

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<int>("ApprStatus")
                        .HasColumnType("int");

                    b.Property<string>("EvalCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FocusArea")
                        .HasColumnType("int");

                    b.Property<DateTime>("IdentifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("RiskConsequenceId")
                        .HasColumnType("int");

                    b.Property<string>("RiskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskLikelihoodId")
                        .HasColumnType("int");

                    b.Property<string>("RiskOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskRank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int");

                    b.Property<int?>("StrategicObjective")
                        .HasColumnType("int");

                    b.HasKey("RiskId");

                    b.HasIndex("Activity");

                    b.HasIndex("FocusArea");

                    b.HasIndex("StrategicObjective");

                    b.ToTable("RiskIdentification");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EvaluationCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskConsequenceId")
                        .HasColumnType("int");

                    b.Property<int>("RiskLikelihoodId")
                        .HasColumnType("int");

                    b.Property<int>("RiskRank")
                        .HasColumnType("int");

                    b.Property<string>("RiskValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskMatrix");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskRegister", b =>
                {
                    b.Property<int>("RiskRefID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskRefID"));

                    b.Property<string>("ActionTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<long>("ActivityBudget")
                        .HasColumnType("bigint");

                    b.Property<string>("ActualBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprStatus")
                        .HasColumnType("int");

                    b.Property<string>("ControlEffectiveness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Effectiveness")
                        .HasColumnType("int");

                    b.Property<string>("EvalCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Events")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FocusArea")
                        .HasColumnType("int");

                    b.Property<DateTime>("IdentifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opportunity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiskCause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskConsequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskConsequenceId")
                        .HasColumnType("int");

                    b.Property<string>("RiskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskId")
                        .HasColumnType("int");

                    b.Property<int>("RiskLikelihoodId")
                        .HasColumnType("int");

                    b.Property<string>("RiskOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskRank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskRatingCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskRatingColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskRatingId")
                        .HasColumnType("int");

                    b.Property<int?>("RiskResidualConsequenceId")
                        .HasColumnType("int");

                    b.Property<int?>("RiskResidualLikelihoodId")
                        .HasColumnType("int");

                    b.Property<string>("RiskResidualRank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskResidualScore")
                        .HasColumnType("int");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int");

                    b.Property<string>("RiskSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StrategicObjective")
                        .HasColumnType("int");

                    b.Property<int?>("riskTolerence")
                        .HasColumnType("int");

                    b.Property<string>("riskTolerenceJustification")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiskRefID");

                    b.HasIndex("Activity");

                    b.HasIndex("FocusArea");

                    b.HasIndex("RiskId");

                    b.HasIndex("StrategicObjective");

                    b.ToTable("RiskRegister");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskSource", b =>
                {
                    b.Property<int>("RiskSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskSourceId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.HasKey("RiskSourceId");

                    b.HasIndex("RiskId");

                    b.ToTable("RiskSources");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskTreatmentPlan", b =>
                {
                    b.Property<int>("TreatmentPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentPlanId"));

                    b.Property<long>("Baseline")
                        .HasColumnType("bigint");

                    b.Property<long>("CumulativeTarget")
                        .HasColumnType("bigint");

                    b.Property<string>("DataCollectionInstrumentMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyOfReporting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndicatorDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MeansOfVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePersons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskRefID")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentAction")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TreatmentPlanId");

                    b.HasIndex("RiskRefID");

                    b.ToTable("RiskTreatmentPlan");
                });

            modelBuilder.Entity("MEMIS.Data.SDTAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AchivementStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalStatusDDCS")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusDirector")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusHBPD")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusHOD")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusMEOFfficer")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatusOfficer")
                        .HasColumnType("int");

                    b.Property<string>("DDCSAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DDCSActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DDCSComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Denominator")
                        .HasColumnType("real");

                    b.Property<string>("DirectorAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DirectorActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectorComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HBPDAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HBPDActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HBPDComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HODAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HODActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HODComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("ImplementedTimeline")
                        .HasColumnType("real");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MEOfficerAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MEOfficerActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MEOfficerComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<float>("Numerator")
                        .HasColumnType("real");

                    b.Property<float>("ProportionTimeline")
                        .HasColumnType("real");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SDTMasterId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<string>("Variance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SDTMasterId");

                    b.ToTable("SDTAssessment");
                });

            modelBuilder.Entity("MEMIS.Data.SDTMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Denominator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EvaluationPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Measure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numerator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceDeliveryTimeline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("SDTMaster");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicAction", b =>
                {
                    b.Property<int>("intAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intAction"));

                    b.Property<string>("actionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("actionName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("intIntervention")
                        .HasColumnType("int");

                    b.HasKey("intAction");

                    b.HasIndex("intIntervention");

                    b.ToTable("StrategicAction");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicIntervention", b =>
                {
                    b.Property<int>("intIntervention")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intIntervention"));

                    b.Property<string>("InterventionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("InterventionName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("intObjective")
                        .HasColumnType("int");

                    b.HasKey("intIntervention");

                    b.HasIndex("intObjective");

                    b.ToTable("StrategicIntervention");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicObjective", b =>
                {
                    b.Property<int>("intObjective")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intObjective"));

                    b.Property<string>("ObjectiveCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ObjectiveName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("intFocus")
                        .HasColumnType("int");

                    b.HasKey("intObjective");

                    b.HasIndex("intFocus");

                    b.ToTable("StrategicObjective");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StrategicAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("focusArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ndp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("programObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strategicIntervention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strategicObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subProgram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StrategicPlan");
                });

            modelBuilder.Entity("MEMIS.Data.WorkPlanSettingsRegion", b =>
                {
                    b.Property<int>("intWrokPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intWrokPlan"));

                    b.Property<double?>("Q1Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q1Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q2Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q2Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q3Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q3Target")
                        .HasColumnType("float");

                    b.Property<double?>("Q4Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Q4Target")
                        .HasColumnType("float");

                    b.Property<string>("StrategicAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("baseline")
                        .HasColumnType("float");

                    b.Property<double?>("budgetAmount")
                        .HasColumnType("float");

                    b.Property<double?>("budgetCode")
                        .HasColumnType("float");

                    b.Property<double?>("comparativeTarget")
                        .HasColumnType("float");

                    b.Property<string>("outputIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strategicIntervention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strategicObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("unitCost")
                        .HasColumnType("float");

                    b.HasKey("intWrokPlan");

                    b.ToTable("WorkPlanSettingsRegion");
                });

            modelBuilder.Entity("MEMIS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("intDept")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("intDir")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MEMIS.Models.Register", b =>
                {
                    b.Property<int>("IntUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntUser"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("intDept")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("intDir")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("intRegion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IntUser");

                    b.ToTable("Regsiter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MEMIS.Data.Activity", b =>
                {
                    b.HasOne("MEMIS.Data.StrategicAction", "StrategicAction")
                        .WithMany("Activities")
                        .HasForeignKey("intAction");

                    b.Navigation("StrategicAction");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssess", b =>
                {
                    b.HasOne("MEMIS.Data.StrategicAction", "StrategicAction")
                        .WithMany()
                        .HasForeignKey("intAction");

                    b.HasOne("MEMIS.Data.Activity", "ActivityFk")
                        .WithMany()
                        .HasForeignKey("intActivity");

                    b.HasOne("MEMIS.Data.Department", "DepartmentFk")
                        .WithMany()
                        .HasForeignKey("intDept");

                    b.HasOne("MEMIS.Data.StrategicIntervention", "StrategicIntervention")
                        .WithMany()
                        .HasForeignKey("intIntervention");

                    b.Navigation("ActivityFk");

                    b.Navigation("DepartmentFk");

                    b.Navigation("StrategicAction");

                    b.Navigation("StrategicIntervention");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessRegion", b =>
                {
                    b.HasOne("MEMIS.Data.ActivityAssess", "ActivityAssessFk")
                        .WithMany("ActivityAssessRegions")
                        .HasForeignKey("intAssess")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("intRegion");

                    b.Navigation("ActivityAssessFk");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessment", b =>
                {
                    b.HasOne("MEMIS.Data.Master.ImplementationStatus", "ImplementationStatus")
                        .WithMany("ActivityAssessments")
                        .HasForeignKey("ImpStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Department", "DepartmentFk")
                        .WithMany()
                        .HasForeignKey("intDept");

                    b.Navigation("DepartmentFk");

                    b.Navigation("ImplementationStatus");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessmentRegion", b =>
                {
                    b.HasOne("MEMIS.Data.ActivityAssess", "ActivityAssessFk")
                        .WithMany()
                        .HasForeignKey("intAssess")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.ActivityAssessment", "ActivityAssessmentFk")
                        .WithMany("ActivityAssessmentRegions")
                        .HasForeignKey("intAssessment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("intRegion");

                    b.Navigation("ActivityAssessFk");

                    b.Navigation("ActivityAssessmentFk");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityPlan", b =>
                {
                    b.HasOne("MEMIS.Data.ProjectInitiation", "ProjectInitiationFk")
                        .WithMany()
                        .HasForeignKey("ProjectInitiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectInitiationFk");
                });

            modelBuilder.Entity("MEMIS.Data.AnnualImplemtationPlan", b =>
                {
                    b.HasOne("MEMIS.Data.StrategicAction", "StrategicActionFk")
                        .WithMany()
                        .HasForeignKey("intAction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Activity", "ActivityFk")
                        .WithMany()
                        .HasForeignKey("intActivity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Department", "DepartmentFk")
                        .WithMany()
                        .HasForeignKey("intDept")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.FocusArea", "FocusAreaFk")
                        .WithMany()
                        .HasForeignKey("intFocus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.StrategicIntervention", "StrategicInterventionFk")
                        .WithMany()
                        .HasForeignKey("intIntervention")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.StrategicObjective", "StrategicObjectiveFk")
                        .WithMany()
                        .HasForeignKey("intObjective")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityFk");

                    b.Navigation("DepartmentFk");

                    b.Navigation("FocusAreaFk");

                    b.Navigation("StrategicActionFk");

                    b.Navigation("StrategicInterventionFk");

                    b.Navigation("StrategicObjectiveFk");
                });

            modelBuilder.Entity("MEMIS.Data.ComplianceSupportSupervision", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("intRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MEMIS.Data.Department", b =>
                {
                    b.HasOne("MEMIS.Models.ApplicationUser", "Hod")
                        .WithMany()
                        .HasForeignKey("HodId");

                    b.HasOne("MEMIS.Data.Directorate", "DirectorateFk")
                        .WithMany()
                        .HasForeignKey("intDir")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectorateFk");

                    b.Navigation("Hod");
                });

            modelBuilder.Entity("MEMIS.Data.DeptPlan", b =>
                {
                    b.HasOne("MEMIS.Data.Department", "DepartmentFk")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("MEMIS.Data.StrategicPlan", "StrategicActionFk")
                        .WithMany()
                        .HasForeignKey("StrategicAction");

                    b.HasOne("MEMIS.Data.StrategicPlan", "StrategicPlanFk")
                        .WithMany()
                        .HasForeignKey("StrategicObjective");

                    b.HasOne("MEMIS.Data.StrategicPlan", "StrategicInterventionFk")
                        .WithMany()
                        .HasForeignKey("strategicIntervention");

                    b.Navigation("DepartmentFk");

                    b.Navigation("StrategicActionFk");

                    b.Navigation("StrategicInterventionFk");

                    b.Navigation("StrategicPlanFk");
                });

            modelBuilder.Entity("MEMIS.Data.Directorate", b =>
                {
                    b.HasOne("MEMIS.Models.ApplicationUser", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("MEMIS.Data.Enforcement", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("intRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MEMIS.Data.GDP", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("intRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MEMIS.Data.GPP", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("intRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MEMIS.Data.HerbalInspection", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("intRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MEMIS.Data.KPIAssessment", b =>
                {
                    b.HasOne("MEMIS.Data.KPIMaster", "KPIMasterFk")
                        .WithMany()
                        .HasForeignKey("KPIMasterId");

                    b.Navigation("KPIMasterFk");
                });

            modelBuilder.Entity("MEMIS.Data.KPIMaster", b =>
                {
                    b.HasOne("MEMIS.Data.StrategicPlan", "StrategicPlanFk")
                        .WithMany()
                        .HasForeignKey("StrategicObjective");

                    b.Navigation("StrategicPlanFk");
                });

            modelBuilder.Entity("MEMIS.Data.Preinspection", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("MEMIS.Data.PreinspectionNewManUnit", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("MEMIS.Data.PreinspectionPharma", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("MEMIS.Data.ProgramImplementationPlan", b =>
                {
                    b.HasOne("MEMIS.Data.StrategicAction", "StrategicActionFK")
                        .WithMany()
                        .HasForeignKey("intAction");

                    b.HasOne("MEMIS.Data.Activity", "ActivityFK")
                        .WithMany()
                        .HasForeignKey("intActivity");

                    b.HasOne("MEMIS.Data.StrategicIntervention", "StrategicInterventionFK")
                        .WithMany()
                        .HasForeignKey("intIntervention");

                    b.HasOne("MEMIS.Data.StrategicObjective", "StrategicObjectiveFK")
                        .WithMany()
                        .HasForeignKey("intObjective");

                    b.Navigation("ActivityFK");

                    b.Navigation("StrategicActionFK");

                    b.Navigation("StrategicInterventionFK");

                    b.Navigation("StrategicObjectiveFK");
                });

            modelBuilder.Entity("MEMIS.Data.Project.MonitoringAndControl", b =>
                {
                    b.HasOne("MEMIS.Data.ProjectInitiation", "ProjectInitiationFk")
                        .WithMany()
                        .HasForeignKey("ProjectInitiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectInitiationFk");
                });

            modelBuilder.Entity("MEMIS.Data.Project.StakeHolder", b =>
                {
                    b.HasOne("MEMIS.Data.ProjectInitiation", "ProjectInitiationFk")
                        .WithMany()
                        .HasForeignKey("ProjectInitiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectInitiationFk");
                });

            modelBuilder.Entity("MEMIS.Data.ProjectInitiation", b =>
                {
                    b.HasOne("MEMIS.Data.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("MEMIS.Data.ProjectOthersTab", b =>
                {
                    b.HasOne("MEMIS.Data.ProjectInitiation", "ProjectInitiationFk")
                        .WithMany()
                        .HasForeignKey("ProjectInitiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectInitiationFk");
                });

            modelBuilder.Entity("MEMIS.Data.ProjectPayment", b =>
                {
                    b.HasOne("MEMIS.Data.ProjectInitiation", "ProjectInitiationFk")
                        .WithMany()
                        .HasForeignKey("ProjectInitiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectInitiationFk");
                });

            modelBuilder.Entity("MEMIS.Data.ProjectRiskIdentification", b =>
                {
                    b.HasOne("MEMIS.Data.ProjectInitiation", "ProjectInitiationFk")
                        .WithMany()
                        .HasForeignKey("ProjectInitiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectInitiationFk");
                });

            modelBuilder.Entity("MEMIS.Data.QuaterlyPlan", b =>
                {
                    b.HasOne("MEMIS.Data.ActivityAssess", "ActivityAssess")
                        .WithMany("QuaterlyPlans")
                        .HasForeignKey("ActivityAccessId");

                    b.HasOne("MEMIS.Data.ActivityAssessRegion", "ActivityAssessRegion")
                        .WithMany("QuaterlyPlans")
                        .HasForeignKey("ActivityAssessRegionId");

                    b.HasOne("MEMIS.Data.ActivityAssessment", "ActivityAssessment")
                        .WithMany("QuaterlyPlans")
                        .HasForeignKey("ActivityAssessmentId");

                    b.HasOne("MEMIS.Data.ActivityAssessmentRegion", "ActivityAssessmentRegion")
                        .WithMany("QuaterlyPlans")
                        .HasForeignKey("ActivityAssessmentRegionId");

                    b.HasOne("MEMIS.Data.DeptPlan", "DeptPlan")
                        .WithMany("QuaterlyPlans")
                        .HasForeignKey("DeptPlanId");

                    b.Navigation("ActivityAssess");

                    b.Navigation("ActivityAssessRegion");

                    b.Navigation("ActivityAssessment");

                    b.Navigation("ActivityAssessmentRegion");

                    b.Navigation("DeptPlan");
                });

            modelBuilder.Entity("MEMIS.Data.Region", b =>
                {
                    b.HasOne("MEMIS.Models.ApplicationUser", "IntHead")
                        .WithMany()
                        .HasForeignKey("IntHeadId");

                    b.HasOne("MEMIS.Models.ApplicationUser", "RegCoordinator")
                        .WithMany()
                        .HasForeignKey("RegCoordinatorId");

                    b.Navigation("IntHead");

                    b.Navigation("RegCoordinator");
                });

            modelBuilder.Entity("MEMIS.Data.RelocationDrugShop", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("MEMIS.Data.RelocationPharma", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("MEMIS.Data.Renewal", b =>
                {
                    b.HasOne("MEMIS.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Region", "Region")
                        .WithMany()
                        .HasForeignKey("intRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.Cause", b =>
                {
                    b.HasOne("MEMIS.Data.Risk.RiskIdent", "RiskIdent")
                        .WithMany()
                        .HasForeignKey("intRisk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskIdent");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.Event", b =>
                {
                    b.HasOne("MEMIS.Data.Risk.RiskIdentification", "RiskIdentification")
                        .WithMany("Events")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskIdentification");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.QuarterlyRiskAction", b =>
                {
                    b.HasOne("MEMIS.Data.Master.ImplementationStatus", "ImplementationStatus")
                        .WithMany("QuarterlyRiskActions")
                        .HasForeignKey("ImpStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.Risk.RiskTreatmentPlan", "RiskTreatmentPlan")
                        .WithMany("QuarterlyRiskActions")
                        .HasForeignKey("TreatmentPlanId");

                    b.Navigation("ImplementationStatus");

                    b.Navigation("RiskTreatmentPlan");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskCause", b =>
                {
                    b.HasOne("MEMIS.Data.Risk.RiskIdentification", "RiskIdentification")
                        .WithMany("RiskCauses")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskIdentification");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskConsequenceDetails", b =>
                {
                    b.HasOne("MEMIS.Data.Risk.RiskIdentification", "RiskIdentification")
                        .WithMany("RiskConsequenceDetails")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskIdentification");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskDetail", b =>
                {
                    b.HasOne("MEMIS.Data.Risk.RiskIdentification", "RiskIdentification")
                        .WithMany("RiskDetails")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskIdentification");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskIdent", b =>
                {
                    b.HasOne("MEMIS.Data.StrategicObjective", "StrategicObjectiveFk")
                        .WithMany()
                        .HasForeignKey("intStrategicObjective");

                    b.Navigation("StrategicObjectiveFk");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskIdentification", b =>
                {
                    b.HasOne("MEMIS.Data.Activity", "ActivityFk")
                        .WithMany()
                        .HasForeignKey("Activity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.FocusArea", "FocusAreaFk")
                        .WithMany()
                        .HasForeignKey("FocusArea");

                    b.HasOne("MEMIS.Data.StrategicObjective", "StrategicPlanFk")
                        .WithMany()
                        .HasForeignKey("StrategicObjective");

                    b.Navigation("ActivityFk");

                    b.Navigation("FocusAreaFk");

                    b.Navigation("StrategicPlanFk");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskRegister", b =>
                {
                    b.HasOne("MEMIS.Data.Activity", "ActivityFk")
                        .WithMany()
                        .HasForeignKey("Activity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Data.FocusArea", "FocusAreaFk")
                        .WithMany()
                        .HasForeignKey("FocusArea");

                    b.HasOne("MEMIS.Data.Risk.RiskIdentification", "RiskIdentificationFk")
                        .WithMany()
                        .HasForeignKey("RiskId");

                    b.HasOne("MEMIS.Data.StrategicObjective", "StrategicPlanFk")
                        .WithMany()
                        .HasForeignKey("StrategicObjective");

                    b.Navigation("ActivityFk");

                    b.Navigation("FocusAreaFk");

                    b.Navigation("RiskIdentificationFk");

                    b.Navigation("StrategicPlanFk");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskSource", b =>
                {
                    b.HasOne("MEMIS.Data.Risk.RiskIdentification", "RiskIdentification")
                        .WithMany("RiskSources")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RiskIdentification");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskTreatmentPlan", b =>
                {
                    b.HasOne("MEMIS.Data.Risk.RiskRegister", "RiskRegister")
                        .WithMany("RiskTreatmentPlans")
                        .HasForeignKey("RiskRefID");

                    b.Navigation("RiskRegister");
                });

            modelBuilder.Entity("MEMIS.Data.SDTAssessment", b =>
                {
                    b.HasOne("MEMIS.Data.SDTMaster", "SDTMasterFk")
                        .WithMany()
                        .HasForeignKey("SDTMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SDTMasterFk");
                });

            modelBuilder.Entity("MEMIS.Data.SDTMaster", b =>
                {
                    b.HasOne("MEMIS.Data.Department", "DepartmentFk")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("DepartmentFk");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicAction", b =>
                {
                    b.HasOne("MEMIS.Data.StrategicIntervention", "StrategicIntervention")
                        .WithMany("StrategicActions")
                        .HasForeignKey("intIntervention");

                    b.Navigation("StrategicIntervention");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicIntervention", b =>
                {
                    b.HasOne("MEMIS.Data.StrategicObjective", "StrategicObjective")
                        .WithMany("StrategicInterventions")
                        .HasForeignKey("intObjective");

                    b.Navigation("StrategicObjective");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicObjective", b =>
                {
                    b.HasOne("MEMIS.Data.FocusArea", "FocusArea")
                        .WithMany("StrategicObjectives")
                        .HasForeignKey("intFocus");

                    b.Navigation("FocusArea");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MEMIS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MEMIS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEMIS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MEMIS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssess", b =>
                {
                    b.Navigation("ActivityAssessRegions");

                    b.Navigation("QuaterlyPlans");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessRegion", b =>
                {
                    b.Navigation("QuaterlyPlans");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessment", b =>
                {
                    b.Navigation("ActivityAssessmentRegions");

                    b.Navigation("QuaterlyPlans");
                });

            modelBuilder.Entity("MEMIS.Data.ActivityAssessmentRegion", b =>
                {
                    b.Navigation("QuaterlyPlans");
                });

            modelBuilder.Entity("MEMIS.Data.DeptPlan", b =>
                {
                    b.Navigation("QuaterlyPlans");
                });

            modelBuilder.Entity("MEMIS.Data.FocusArea", b =>
                {
                    b.Navigation("StrategicObjectives");
                });

            modelBuilder.Entity("MEMIS.Data.Master.ImplementationStatus", b =>
                {
                    b.Navigation("ActivityAssessments");

                    b.Navigation("QuarterlyRiskActions");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskIdentification", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("RiskCauses");

                    b.Navigation("RiskConsequenceDetails");

                    b.Navigation("RiskDetails");

                    b.Navigation("RiskSources");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskRegister", b =>
                {
                    b.Navigation("RiskTreatmentPlans");
                });

            modelBuilder.Entity("MEMIS.Data.Risk.RiskTreatmentPlan", b =>
                {
                    b.Navigation("QuarterlyRiskActions");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicAction", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicIntervention", b =>
                {
                    b.Navigation("StrategicActions");
                });

            modelBuilder.Entity("MEMIS.Data.StrategicObjective", b =>
                {
                    b.Navigation("StrategicInterventions");
                });
#pragma warning restore 612, 618
        }
    }
}
